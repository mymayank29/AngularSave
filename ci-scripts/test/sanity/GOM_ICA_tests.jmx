<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Invoice Analytics Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="Setup" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1478786835000</longProp>
        <longProp name="ThreadGroup.end_time">1478786835000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Properties [UAT]" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="jdbc" elementType="Argument">
              <stringProp name="Argument.name">jdbc</stringProp>
              <stringProp name="Argument.value">${__P(jdbc,jdbc:impala://sasl0038.gdc0.chevron.net:21050;AuthMech=1;KrbHostFQDN=sasl0038.gdc0.chevron.net;KrbServiceName=impala)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="lakeDB" elementType="Argument">
              <stringProp name="Argument.name">lakeDB</stringProp>
              <stringProp name="Argument.value">${__P(lakeDB,cdf_lake_invoiceanalytics_v2_t)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="keytab" elementType="Argument">
              <stringProp name="Argument.name">keytab</stringProp>
              <stringProp name="Argument.value">${__P(keytab,/home/svccdfpt/.keytab/svccdfpt.keytab)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="principal" elementType="Argument">
              <stringProp name="Argument.name">principal</stringProp>
              <stringProp name="Argument.value">${__P(principal,svccdfpt@CT.CHEVRONTEXACO.NET)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="krbConf" elementType="Argument">
              <stringProp name="Argument.name">krbConf</stringProp>
              <stringProp name="Argument.value">${__P(krbConf,/etc/krb5.conf)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="stageDB" elementType="Argument">
              <stringProp name="Argument.name">stageDB</stringProp>
              <stringProp name="Argument.value">${__P(stageDB,cdf_stg_invoiceanalytics_v2_t)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="runMode" elementType="Argument">
              <stringProp name="Argument.name">runMode</stringProp>
              <stringProp name="Argument.value">${__P(runMode,\,full\,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Properties [DEV]" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="jdbc" elementType="Argument">
              <stringProp name="Argument.name">jdbc</stringProp>
              <stringProp name="Argument.value">${__P(jdbc,jdbc:impala://llin602.xhl.chevrontexaco.net:21050;AuthMech=1;KrbHostFQDN=llin602.xhl.chevrontexaco.net;KrbServiceName=impala)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">Changed from 602 to 601</stringProp>
            </elementProp>
            <elementProp name="lakeDB" elementType="Argument">
              <stringProp name="Argument.name">lakeDB</stringProp>
              <stringProp name="Argument.value">${__P(lakeDB,cdf_lake_invoiceanalytics_v2_d)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="keytab" elementType="Argument">
              <stringProp name="Argument.name">keytab</stringProp>
              <stringProp name="Argument.value">${__P(keytab,/home/svccdfpd/.keytab/svccdfpd.keytab)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">${__P(keytab,/home/svccdfpd/.keytab/svccdfpd.keytab)}</stringProp>
            </elementProp>
            <elementProp name="principal" elementType="Argument">
              <stringProp name="Argument.name">principal</stringProp>
              <stringProp name="Argument.value">${__P(principal,svccdfpd@CT.CHEVRONTEXACO.NET)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">${__P(principal,svccdfpd@CT.CHEVRONTEXACO.NET)}</stringProp>
            </elementProp>
            <elementProp name="krbConf" elementType="Argument">
              <stringProp name="Argument.name">krbConf</stringProp>
              <stringProp name="Argument.value">${__P(krbConf,/etc/krb5.conf)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">/etc/krb5.conf</stringProp>
            </elementProp>
            <elementProp name="stageDB" elementType="Argument">
              <stringProp name="Argument.name">stageDB</stringProp>
              <stringProp name="Argument.value">${__P(stageDB,cdf_stg_invoiceanalytics_v2_d)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="runMode" elementType="Argument">
              <stringProp name="Argument.name">runMode</stringProp>
              <stringProp name="Argument.value">${__P(runMode,\,full\,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Properties [local for UAT] (osta keytab)" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="jdbc" elementType="Argument">
              <stringProp name="Argument.name">jdbc</stringProp>
              <stringProp name="Argument.value">${__P(jdbc,jdbc:impala://sasl0038.gdc0.chevron.net:21050;AuthMech=1;KrbHostFQDN=sasl0038.gdc0.chevron.net;KrbServiceName=impala)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="lakeDB" elementType="Argument">
              <stringProp name="Argument.name">lakeDB</stringProp>
              <stringProp name="Argument.value">${__P(lakeDB,cdf_lake_invoiceanalytics_v2_t)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="keytab" elementType="Argument">
              <stringProp name="Argument.name">keytab</stringProp>
              <stringProp name="Argument.value">${__P(keytab,C:\MyFiles\JMETR\AUTH_FILES\hqej.keytab)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="principal" elementType="Argument">
              <stringProp name="Argument.name">principal</stringProp>
              <stringProp name="Argument.value">${__P(principal,hqej@CT.CHEVRONTEXACO.NET)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">osta</stringProp>
            </elementProp>
            <elementProp name="krbConf" elementType="Argument">
              <stringProp name="Argument.name">krbConf</stringProp>
              <stringProp name="Argument.value">${__P(krbConf,C:\MyFiles\JMETR\AUTH_FILES\krb5.conf)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="stageDB" elementType="Argument">
              <stringProp name="Argument.name">stageDB</stringProp>
              <stringProp name="Argument.value">${__P(stageDB,cdf_stg_invoiceanalytics_v2_t)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="runMode" elementType="Argument">
              <stringProp name="Argument.name">runMode</stringProp>
              <stringProp name="Argument.value">${__P(runMode,\,full\,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Properties [local for DEV] (osta keytab)" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="jdbc" elementType="Argument">
              <stringProp name="Argument.name">jdbc</stringProp>
              <stringProp name="Argument.value">jdbc:impala://llin602.xhl.chevrontexaco.net:21050;AuthMech=1;KrbHostFQDN=llin602.xhl.chevrontexaco.net;KrbServiceName=impala)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="lakeDB" elementType="Argument">
              <stringProp name="Argument.name">lakeDB</stringProp>
              <stringProp name="Argument.value">${__P(lakeDB,cdf_lake_invoiceanalytics_v2_d)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="keytab" elementType="Argument">
              <stringProp name="Argument.name">keytab</stringProp>
              <stringProp name="Argument.value">${__P(keytab,C:\MyFiles\JMETR\AUTH_FILES\osta.keytab)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="principal" elementType="Argument">
              <stringProp name="Argument.name">principal</stringProp>
              <stringProp name="Argument.value">${__P(principal,osta@CT.CHEVRONTEXACO.NET)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">${__P(principal,osta@CT.CHEVRONTEXACO.NET)}</stringProp>
            </elementProp>
            <elementProp name="krbConf" elementType="Argument">
              <stringProp name="Argument.name">krbConf</stringProp>
              <stringProp name="Argument.value">${__P(krbConf,C:\MyFiles\JMETR\AUTH_FILES\krb5.conf)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="stageDB" elementType="Argument">
              <stringProp name="Argument.name">stageDB</stringProp>
              <stringProp name="Argument.value">${__P(stageDB,cdf_stg_invoiceanalytics_v2_d)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="runMode" elementType="Argument">
              <stringProp name="Argument.name">runMode</stringProp>
              <stringProp name="Argument.value">${__P(runMode,\,full\,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <cvx.udap.jmeter.KerberosLoginConfig guiclass="TestBeanGUI" testclass="cvx.udap.jmeter.KerberosLoginConfig" testname="Kerberos Login" enabled="true">
          <stringProp name="keytabLocation">${keytab}</stringProp>
          <stringProp name="krb5ConfLocation">${krbConf}</stringProp>
          <stringProp name="principal">${principal}</stringProp>
        </cvx.udap.jmeter.KerberosLoginConfig>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="Hive JDBC Connection Configuration" enabled="false">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">hivePool</stringProp>
          <stringProp name="dbUrl">jdbc:hive2://llin603.xhl.chevrontexaco.net:10000/default;principal=hive/_HOST@CT.CHEVRONTEXACO.NET</stringProp>
          <stringProp name="driver">org.apache.hive.jdbc.HiveDriver</stringProp>
          <boolProp name="keepAlive">false</boolProp>
          <stringProp name="password">Warangal@1987</stringProp>
          <stringProp name="poolMax">1</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username"></stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="Impala JDBC Connection Configuration" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">impalaPool</stringProp>
          <stringProp name="dbUrl">${jdbc}</stringProp>
          <stringProp name="driver">com.cloudera.impala.jdbc41.Driver</stringProp>
          <boolProp name="keepAlive">false</boolProp>
          <stringProp name="password"></stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">15000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">600000</stringProp>
          <stringProp name="username"></stringProp>
        </JDBCDataSource>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="sanity" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1478700703000</longProp>
        <longProp name="ThreadGroup.end_time">1478700703000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="stage - not empty check" enabled="true">
          <stringProp name="ForeachController.inputVal">table_1</stringProp>
          <stringProp name="ForeachController.returnVal">table_name_1</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
          <stringProp name="ForeachController.startIndex">0</stringProp>
          <stringProp name="ForeachController.endIndex">12</stringProp>
        </ForeachController>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables [stage - not empty check]" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="table_1_1" elementType="Argument">
                <stringProp name="Argument.name">table_1_1</stringProp>
                <stringProp name="Argument.value">simsmart_vw_dwep_contracts</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="table_1_2" elementType="Argument">
                <stringProp name="Argument.name">table_1_2</stringProp>
                <stringProp name="Argument.value">simsmart_vw_dwep_ketera_catalog_item_list</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="table_1_3" elementType="Argument">
                <stringProp name="Argument.name">table_1_3</stringProp>
                <stringProp name="Argument.value">simsmart_vw_dwep_po_and_se_line_item</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="table_1_4" elementType="Argument">
                <stringProp name="Argument.name">table_1_4</stringProp>
                <stringProp name="Argument.value">wvcas</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="table_1_5" elementType="Argument">
                <stringProp name="Argument.name">table_1_5</stringProp>
                <stringProp name="Argument.value">wvcascomp</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="table_1_6" elementType="Argument">
                <stringProp name="Argument.name">table_1_6</stringProp>
                <stringProp name="Argument.value">wvjob</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="table_1_7" elementType="Argument">
                <stringProp name="Argument.name">table_1_7</stringProp>
                <stringProp name="Argument.value">wvjobafe</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="table_1_8" elementType="Argument">
                <stringProp name="Argument.name">table_1_8</stringProp>
                <stringProp name="Argument.value">wvjobcontact</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="table_1_9" elementType="Argument">
                <stringProp name="Argument.name">table_1_9</stringProp>
                <stringProp name="Argument.value">wvjobdrillbit</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="table_1_10" elementType="Argument">
                <stringProp name="Argument.name">table_1_10</stringProp>
                <stringProp name="Argument.value">wvjobdrillstring</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="table_1_11" elementType="Argument">
                <stringProp name="Argument.name">table_1_11</stringProp>
                <stringProp name="Argument.value">wvjobdrillstringcomp</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="table_1_12" elementType="Argument">
                <stringProp name="Argument.name">table_1_12</stringProp>
                <stringProp name="Argument.value">wvjobdrillstringdrillparam</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="table_1_13" elementType="Argument">
                <stringProp name="Argument.name">table_1_13</stringProp>
                <stringProp name="Argument.value">wvjobintervalproblem</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="table_1_14" elementType="Argument">
                <stringProp name="Argument.name">table_1_14</stringProp>
                <stringProp name="Argument.value">wvjobkick</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="table_1_15" elementType="Argument">
                <stringProp name="Argument.name">table_1_15</stringProp>
                <stringProp name="Argument.value">wvjoblostcirc</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="table_1_16" elementType="Argument">
                <stringProp name="Argument.name">table_1_16</stringProp>
                <stringProp name="Argument.value">wvjoboffline</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="table_1_17" elementType="Argument">
                <stringProp name="Argument.name">table_1_17</stringProp>
                <stringProp name="Argument.value">wvjobofflinedatestimelog</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="table_1_18" elementType="Argument">
                <stringProp name="Argument.name">table_1_18</stringProp>
                <stringProp name="Argument.value">wvjobprogramphase</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="table_1_19" elementType="Argument">
                <stringProp name="Argument.name">table_1_19</stringProp>
                <stringProp name="Argument.value">wvjobreport</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="table_1_20" elementType="Argument">
                <stringProp name="Argument.name">table_1_20</stringProp>
                <stringProp name="Argument.value">wvjobreportcontacts</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="table_1_21" elementType="Argument">
                <stringProp name="Argument.name">table_1_21</stringProp>
                <stringProp name="Argument.value">wvjobreportcostgen</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="table_1_22" elementType="Argument">
                <stringProp name="Argument.name">table_1_22</stringProp>
                <stringProp name="Argument.value">wvjobreportfluidswell</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="table_1_23" elementType="Argument">
                <stringProp name="Argument.name">table_1_23</stringProp>
                <stringProp name="Argument.value">wvjobreporthazardid</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="table_1_24" elementType="Argument">
                <stringProp name="Argument.name">table_1_24</stringProp>
                <stringProp name="Argument.value">wvjobreportmudchk</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="table_1_25" elementType="Argument">
                <stringProp name="Argument.name">table_1_25</stringProp>
                <stringProp name="Argument.value">wvjobreportmudvol</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="table_1_26" elementType="Argument">
                <stringProp name="Argument.name">table_1_26</stringProp>
                <stringProp name="Argument.value">wvjobreportoffshore</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="table_1_27" elementType="Argument">
                <stringProp name="Argument.name">table_1_27</stringProp>
                <stringProp name="Argument.value">wvjobreporttimelog</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="table_1_28" elementType="Argument">
                <stringProp name="Argument.name">table_1_28</stringProp>
                <stringProp name="Argument.value">wvjobrig</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="table_1_29" elementType="Argument">
                <stringProp name="Argument.name">table_1_29</stringProp>
                <stringProp name="Argument.value">wvjobrigbopcomp</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="table_1_30" elementType="Argument">
                <stringProp name="Argument.name">table_1_30</stringProp>
                <stringProp name="Argument.value">wvjobsafetychk</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="table_1_31" elementType="Argument">
                <stringProp name="Argument.name">table_1_31</stringProp>
                <stringProp name="Argument.value">wvjobsafetyincident</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="table_1_32" elementType="Argument">
                <stringProp name="Argument.name">table_1_32</stringProp>
                <stringProp name="Argument.value">wvjobsafetyincidentvict</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="table_1_33" elementType="Argument">
                <stringProp name="Argument.name">table_1_33</stringProp>
                <stringProp name="Argument.value">wvjobservicecontract</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="table_1_34" elementType="Argument">
                <stringProp name="Argument.name">table_1_34</stringProp>
                <stringProp name="Argument.value">wvtestequip</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="table_1_35" elementType="Argument">
                <stringProp name="Argument.name">table_1_35</stringProp>
                <stringProp name="Argument.value">wvtestleakoff</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="table_1_36" elementType="Argument">
                <stringProp name="Argument.name">table_1_36</stringProp>
                <stringProp name="Argument.value">wvwellbore</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="table_1_37" elementType="Argument">
                <stringProp name="Argument.name">table_1_37</stringProp>
                <stringProp name="Argument.value">wvwellboredirsurvey</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="table_1_38" elementType="Argument">
                <stringProp name="Argument.name">table_1_38</stringProp>
                <stringProp name="Argument.value">wvwellboredirsurveydata</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="table_1_39" elementType="Argument">
                <stringProp name="Argument.name">table_1_39</stringProp>
                <stringProp name="Argument.value">wvwellboreformation</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="STAGE - NOT EMPTY CHECK : ${table_name_1}" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT COUNT(*) FROM ${stageDB}.${table_name_1};
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="488631614">expr_0
0
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="stage - structure check" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="STAGE - STRUCTURE CHECK : wvwellheader" enabled="false">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">DESCRIBE ${stageDB}.wvwellheader;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="324717854">name	type	comment
idwell	string	from deserializer
agent	string	from deserializer
area	string	from deserializer
basin	string	from deserializer
basincode	string	from deserializer
com	string	from deserializer
country	string	from deserializer
county	string	from deserializer
currentprimaryfluiddescalc	string	from deserializer
currentwellstatus1	string	from deserializer
currentwellstatus1calc	string	from deserializer
currentwellstatus2	string	from deserializer
currentwellstatus2calc	string	from deserializer
currentwelltyp1calc	string	from deserializer
currentwelltyp2calc	string	from deserializer
directionstowell	string	from deserializer
displaceunwrapcalc	string	from deserializer
district	string	from deserializer
division	string	from deserializer
divisioncode	string	from deserializer
dttmabandon	bigint	from deserializer
dttmfirstprod	bigint	from deserializer
dttmrr	bigint	from deserializer
dttmspud	bigint	from deserializer
dttmstatuscalc	bigint	from deserializer
dttmwellclass	bigint	from deserializer
dttmwelllic	bigint	from deserializer
elvcasflange	string	from deserializer
elvground	string	from deserializer
elvlat	string	from deserializer
elvmudline	string	from deserializer
elvorigkb	string	from deserializer
elvtubhead	string	from deserializer
environmentsensitive	string	from deserializer
ewdist	string	from deserializer
ewflag	string	from deserializer
fieldcode	string	from deserializer
fieldname	string	from deserializer
fieldoffice	string	from deserializer
fieldofficecode	string	from deserializer
govauthority	string	from deserializer
hih2s	string	from deserializer
hisitp	string	from deserializer
idrecelvhistory	string	from deserializer
idrecelvhistorytk	string	from deserializer
idrecproblemcalc	string	from deserializer
idrecproblemcalctk	string	from deserializer
idrecprodsettingcalc	string	from deserializer
idrecprodsettingcalctk	string	from deserializer
kbtocascalc	string	from deserializer
kbtogrdcalc	string	from deserializer
kbtomudcalc	string	from deserializer
kbtoothercalc	string	from deserializer
kbtotubcalc	string	from deserializer
latitude	string	from deserializer
latlongdatum	string	from deserializer
latlongsource	string	from deserializer
lease	string	from deserializer
leasecode	string	from deserializer
legalsurveyloc	string	from deserializer
legalsurveysubtyp	string	from deserializer
legalsurveytyp	string	from deserializer
localtimezone	string	from deserializer
locationnote	string	from deserializer
locationref	string	from deserializer
locationsensitive	string	from deserializer
locationtyp	string	from deserializer
longitude	string	from deserializer
nsdist	string	from deserializer
nsflag	string	from deserializer
operated	string	from deserializer
operator	string	from deserializer
operatorcode	string	from deserializer
othertocascalc	string	from deserializer
othertogrdcalc	string	from deserializer
othertomudcalc	string	from deserializer
othertotubcalc	string	from deserializer
padcode	string	from deserializer
padname	string	from deserializer
pbtdallcalc	string	from deserializer
platform	string	from deserializer
primaryfluiddes	string	from deserializer
problemflag	string	from deserializer
riskclass	string	from deserializer
slot	string	from deserializer
stateprov	string	from deserializer
surfacerights	string	from deserializer
tdallcalc	string	from deserializer
tdcalc	string	from deserializer
tdtvdallcalc	string	from deserializer
towndist	string	from deserializer
townflag	string	from deserializer
townname	string	from deserializer
townstateprov	string	from deserializer
userboolean1	string	from deserializer
userboolean2	string	from deserializer
userboolean3	string	from deserializer
userboolean4	string	from deserializer
userboolean5	string	from deserializer
userdttm1	bigint	from deserializer
userdttm2	bigint	from deserializer
userdttm3	bigint	from deserializer
userdttm4	bigint	from deserializer
userdttm5	bigint	from deserializer
usernum1	string	from deserializer
usernum2	string	from deserializer
usernum3	string	from deserializer
usernum4	string	from deserializer
usernum5	string	from deserializer
usernum6	string	from deserializer
usertxt1	string	from deserializer
usertxt10	string	from deserializer
usertxt2	string	from deserializer
usertxt3	string	from deserializer
usertxt4	string	from deserializer
usertxt5	string	from deserializer
usertxt6	string	from deserializer
usertxt7	string	from deserializer
usertxt8	string	from deserializer
usertxt9	string	from deserializer
utmgridzone	string	from deserializer
utmsource	string	from deserializer
utmx	string	from deserializer
utmy	string	from deserializer
waterdepth	string	from deserializer
waterdepthref	string	from deserializer
wellborenocalc	string	from deserializer
wellclass	string	from deserializer
wellconfig	string	from deserializer
wellida	string	from deserializer
wellidb	string	from deserializer
wellidc	string	from deserializer
wellidd	string	from deserializer
wellide	string	from deserializer
welllicensee	string	from deserializer
welllicenseno	string	from deserializer
wellname	string	from deserializer
welltyp1	string	from deserializer
welltyp2	string	from deserializer
syslockmeui	string	from deserializer
syslockchildrenui	string	from deserializer
syslockme	string	from deserializer
syslockchildren	string	from deserializer
syslockdate	bigint	from deserializer
sysmoddate	bigint	from deserializer
sysmoduser	string	from deserializer
syscreatedate	bigint	from deserializer
syscreateuser	string	from deserializer
systag	string	from deserializer
sysmoddatedb	bigint	from deserializer
sysmoduserdb	string	from deserializer
syssecuritytyp	string	from deserializer
syslockdatemaster	bigint	from deserializer
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="STAGE - STRUCTURE CHECK : wvjob" enabled="false">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">DESCRIBE ${stageDB}.wvjob;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1605833275">name	type	comment
idwell	string	from deserializer
idrec	string	from deserializer
afeamtcalc	string	from deserializer
afeamtnormcalc	string	from deserializer
afenumbercalc	string	from deserializer
afecosttypcalc	string	from deserializer
afenumbersuppcalc	string	from deserializer
afeperdurmlcalc	string	from deserializer
afeperdurmlnormcalc	string	from deserializer
afepertargetdepthcalc	string	from deserializer
afepertargetdepthnormcalc	string	from deserializer
afesupamtcalc	string	from deserializer
afesupamtnormcalc	string	from deserializer
afetotalcalc	string	from deserializer
afetotalnormcalc	string	from deserializer
bhadrillruncalc	string	from deserializer
bhatotalruncalc	string	from deserializer
bitrevscalc	string	from deserializer
chartofaccounts	string	from deserializer
client	string	from deserializer
complexityindex	string	from deserializer
costfinalactual	string	from deserializer
costforecastcalc	string	from deserializer
costmaxtotalcalc	string	from deserializer
costmintotalcalc	string	from deserializer
costmltotalcalc	string	from deserializer
costmlnoexcludecalc	string	from deserializer
costnormforecastcalc	string	from deserializer
costnormperdepthcalc	string	from deserializer
costnormtotalcalc	string	from deserializer
costperdepthcalc	string	from deserializer
costperdepthplanmlcalc	string	from deserializer
costnormperdepthplanmlcalc	string	from deserializer
costtechlimittotalcalc	string	from deserializer
costpertldurcalc	string	from deserializer
costpertldurnormcalc	string	from deserializer
costtotalcalc	string	from deserializer
currencycode	string	from deserializer
currencyexchangerate	string	from deserializer
depthdrilledcalc	string	from deserializer
depthdrilledperbhacalc	string	from deserializer
depthperdurplanmlcalc	string	from deserializer
depthperratiodurationcalc	string	from deserializer
depthrotatingcalc	string	from deserializer
depthslidingcalc	string	from deserializer
dttmend	bigint	from deserializer
dttmendplanmaxcalc	bigint	from deserializer
dttmendplanmincalc	bigint	from deserializer
dttmendplanmlcalc	bigint	from deserializer
dttmendplantechlimitcalc	bigint	from deserializer
dttmspud	bigint	from deserializer
dttmstart	bigint	from deserializer
dttmstartplan	bigint	from deserializer
dttmtotaldepthcalc	bigint	from deserializer
durationmaxtotalcalc	string	from deserializer
durationmintotalcalc	string	from deserializer
durationmltotalcalc	string	from deserializer
durationnoproblemtimecalc	string	from deserializer
durationpersonnelotcalc	string	from deserializer
durationpersonnelregcalc	string	from deserializer
durationpersonneltotcalc	string	from deserializer
durationproblemtimecalc	string	from deserializer
durationspudtoplanmlcalc	string	from deserializer
durationspudtoplanmaxcalc	string	from deserializer
durationspudtoplanmincalc	string	from deserializer
durationspudtoplantechlimcalc	string	from deserializer
durationspudtimelogcalc	string	from deserializer
durationspudtotdcalc	string	from deserializer
durationtechlimittotalcalc	string	from deserializer
durationtimelogtotalcalc	string	from deserializer
durmltotalnoplanchangecalc	string	from deserializer
durmlnoexcludecalc	string	from deserializer
estcostnormsavecalc	string	from deserializer
estcostsavecalc	string	from deserializer
estproblemcostcalc	string	from deserializer
estproblemcostnormcalc	string	from deserializer
estproblemtimecalc	string	from deserializer
esttimesavecalc	string	from deserializer
finalinvoicetotalcalc	string	from deserializer
finalinvoicetotalnormcalc	string	from deserializer
hazardidnorptcalc	string	from deserializer
idreclastrigcalc	string	from deserializer
idreclastrigcalctk	string	from deserializer
idrectub	string	from deserializer
idrectubtk	string	from deserializer
idrecwellbore	string	from deserializer
idrecwellboretk	string	from deserializer
idrecwellborecalc	string	from deserializer
idrecwellborecalctk	string	from deserializer
jobida	string	from deserializer
jobidb	string	from deserializer
jobidc	string	from deserializer
jobsubtyp	string	from deserializer
jobsupplycostcalc	string	from deserializer
jobsupplycostnormcalc	string	from deserializer
jobtyp	string	from deserializer
mudcostcalc	string	from deserializer
mudcostnormcalc	string	from deserializer
muddensitymaxcalc	string	from deserializer
mudtypcalc	string	from deserializer
objective	string	from deserializer
objectivegeo	string	from deserializer
pctproblemtimecalc	string	from deserializer
percenttmrotatingcalc	string	from deserializer
percenttmslidingcalc	string	from deserializer
programmuddensitymaxcalc	string	from deserializer
programmuddensitymincalc	string	from deserializer
projectrefnumbercalc	string	from deserializer
ratetargetcond	string	from deserializer
rateactualcond	string	from deserializer
ratetargetgas	string	from deserializer
rateactualgas	string	from deserializer
ratetargetoil	string	from deserializer
rateactualoil	string	from deserializer
ratetargetwater	string	from deserializer
rateactualwater	string	from deserializer
ratiodurtimelogrefhourscalc	string	from deserializer
reportnocalc	string	from deserializer
responsiblegrp1	string	from deserializer
responsiblegrp2	string	from deserializer
responsiblegrp3	string	from deserializer
resulttechnical	string	from deserializer
ropavgfromspudcalc	string	from deserializer
ropcalc	string	from deserializer
roprotatingcalc	string	from deserializer
ropslidingcalc	string	from deserializer
ropspudtimelogcalc	string	from deserializer
roptimelogcalc	string	from deserializer
safetyincnocalc	string	from deserializer
safetyincreportnocalc	string	from deserializer
status1	string	from deserializer
status2	string	from deserializer
summary	string	from deserializer
summarygeo	string	from deserializer
targetdepth	string	from deserializer
targetdepthtvdcalc	string	from deserializer
targetform	string	from deserializer
tmcirccalc	string	from deserializer
tmdrillcalc	string	from deserializer
tmothercalc	string	from deserializer
tmrotatingcalc	string	from deserializer
tmslidingcalc	string	from deserializer
tmtripcalc	string	from deserializer
totaldepthcalc	string	from deserializer
totaldepthtvdcalc	string	from deserializer
tdtomudcalc	string	from deserializer
userboolean1	string	from deserializer
userboolean2	string	from deserializer
usernum1	string	from deserializer
usernum2	string	from deserializer
usernum3	string	from deserializer
usernum4	string	from deserializer
usernum5	string	from deserializer
usertxt1	string	from deserializer
usertxt2	string	from deserializer
usertxt3	string	from deserializer
usertxt4	string	from deserializer
usertxt5	string	from deserializer
varianceafefinalcalc	string	from deserializer
variancefieldcalc	string	from deserializer
variancefieldfinalcalc	string	from deserializer
variancefinalcalc	string	from deserializer
variancenormafefinalcalc	string	from deserializer
variancenormfieldcalc	string	from deserializer
variancenormfieldfinalcalc	string	from deserializer
variancenormfinalcalc	string	from deserializer
wvtyp	string	from deserializer
syslockmeui	string	from deserializer
syslockchildrenui	string	from deserializer
syslockme	string	from deserializer
syslockchildren	string	from deserializer
syslockdate	bigint	from deserializer
sysmoddate	bigint	from deserializer
sysmoduser	string	from deserializer
syscreatedate	bigint	from deserializer
syscreateuser	string	from deserializer
systag	string	from deserializer
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="STAGE - STRUCTURE CHECK : wvjobafe" enabled="false">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">DESCRIBE ${stageDB}.wvjobafe;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1848222050">name	type	comment
idwell	string	from deserializer
idrecparent	string	from deserializer
idrec	string	from deserializer
afeamtcalc	string	from deserializer
afeamtnormcalc	string	from deserializer
afenumber	string	from deserializer
afenumbersupp	string	from deserializer
afecosttypcalc	string	from deserializer
afestatus	string	from deserializer
afesupamtcalc	string	from deserializer
afesupamtnormcalc	string	from deserializer
afetotalcalc	string	from deserializer
afetotalnormcalc	string	from deserializer
com	string	from deserializer
costforecastcalc	string	from deserializer
costnormtotalcalc	string	from deserializer
costnormforecastcalc	string	from deserializer
costtotalcalc	string	from deserializer
costtyp	string	from deserializer
dttmafe	bigint	from deserializer
dttmafeclose	bigint	from deserializer
exclude	string	from deserializer
finalinvoicetotalcalc	string	from deserializer
finalinvoicetotalnormcalc	string	from deserializer
projectname	string	from deserializer
projectrefnumber	string	from deserializer
typ	string	from deserializer
variancefieldcalc	string	from deserializer
variancenormfieldcalc	string	from deserializer
varianceafefinalcalc	string	from deserializer
variancenormafefinalcalc	string	from deserializer
variancefieldfinalcalc	string	from deserializer
variancenormfieldfinalcalc	string	from deserializer
workingint	string	from deserializer
workingintnote	string	from deserializer
sysseq	string	from deserializer
syslockmeui	string	from deserializer
syslockchildrenui	string	from deserializer
syslockme	string	from deserializer
syslockchildren	string	from deserializer
syslockdate	bigint	from deserializer
sysmoddate	bigint	from deserializer
sysmoduser	string	from deserializer
syscreatedate	bigint	from deserializer
syscreateuser	string	from deserializer
systag	string	from deserializer
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="STAGE - STRUCTURE CHECK : wvjobreport" enabled="false">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">DESCRIBE ${stageDB}.wvjobreport;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1587298654">name	type	comment
idwell	string	from deserializer
idrecparent	string	from deserializer
idrec	string	from deserializer
bitrevscalc	string	from deserializer
condhole	string	from deserializer
condlease	string	from deserializer
condroad	string	from deserializer
condtemp	string	from deserializer
condwave	string	from deserializer
condweather	string	from deserializer
condwind	string	from deserializer
contactcalc	string	from deserializer
costjobsupplyamtcalc	string	from deserializer
costjobsupplyamtnormcalc	string	from deserializer
costjobsupplyamttodatecalc	string	from deserializer
costjobsupplyamttodtncalc	string	from deserializer
costmudaddcalc	string	from deserializer
costmudaddnormcalc	string	from deserializer
costmudaddtodatecalc	string	from deserializer
costmudaddtodatenormcalc	string	from deserializer
costperdepthcalc	string	from deserializer
costperdepthcumcalc	string	from deserializer
costperdepthvarcalc	string	from deserializer
costpertldurcalc	string	from deserializer
costpertldurnormcalc	string	from deserializer
costperdepthnormcalc	string	from deserializer
costprojectedmljobcalc	string	from deserializer
costprojectedmlphasecalc	string	from deserializer
costtodatecalc	string	from deserializer
costtodatenormcalc	string	from deserializer
costtotalcalc	string	from deserializer
costtotalnormcalc	string	from deserializer
daysfromspudcalc	string	from deserializer
daysfromspudtorrcalc	string	from deserializer
depthenddpcalc	string	from deserializer
depthenddpcumcalc	string	from deserializer
depthenddpnullcalc	string	from deserializer
depthnetprogressdpcalc	string	from deserializer
depthperdurcalc	string	from deserializer
depthperdurvarcalc	string	from deserializer
depthprogressdpcalc	string	from deserializer
depthrotatingcalc	string	from deserializer
depthslidingcalc	string	from deserializer
depthstartdpcalc	string	from deserializer
depthstartdpnullcalc	string	from deserializer
depthtvdenddpcalc	string	from deserializer
depthtvdendprojmethod	string	from deserializer
depthtvdstartdpcalc	string	from deserializer
dttmend	bigint	from deserializer
dttmprojendmljobcalc	bigint	from deserializer
dttmprojendmlphasecalc	bigint	from deserializer
dttmstart	bigint	from deserializer
durationnoprobtimecalc	string	from deserializer
durationnoprobtimecumcalc	string	from deserializer
durationpersonnelotcalc	string	from deserializer
durationpersonnelregcalc	string	from deserializer
durationpersonneltotcalc	string	from deserializer
durationproblemtimecalc	string	from deserializer
durationproblemtimecumcalc	string	from deserializer
durationsinceltinc	string	from deserializer
durationsincerptinc	string	from deserializer
durationtimelogcumspudcalc	string	from deserializer
durationtimelogtotalcalc	string	from deserializer
durationtimelogtotcumcalc	string	from deserializer
durnoprobtimecumdayscalc	string	from deserializer
durpersonnelotcumcalc	string	from deserializer
durpersonnelregcumcalc	string	from deserializer
durpersonneltotcumcalc	string	from deserializer
durproblemtimecumdayscalc	string	from deserializer
durprojectedmljobcalc	string	from deserializer
durprojectedmlphasecalc	string	from deserializer
gasbackgroundavg	string	from deserializer
gasbackgroundmax	string	from deserializer
gasconnectionavg	string	from deserializer
gasconnectionmax	string	from deserializer
gasdrillavg	string	from deserializer
gasdrillmax	string	from deserializer
gastripavg	string	from deserializer
gastripmax	string	from deserializer
hazardidnorptcalc	string	from deserializer
hazardidnorptcumcalc	string	from deserializer
h2smax	string	from deserializer
headcountcalc	string	from deserializer
idrecjobprogramphasecalc	string	from deserializer
idrecjobprogramphasecalctk	string	from deserializer
idreclastcascalc	string	from deserializer
idreclastcascalctk	string	from deserializer
idreclastrigcalc	string	from deserializer
idreclastrigcalctk	string	from deserializer
idrecnextcas	string	from deserializer
idrecnextcastk	string	from deserializer
idrecwellborecalc	string	from deserializer
idrecwellborecalctk	string	from deserializer
lastmuddensitycalc	string	from deserializer
pctproblemtimecalc	string	from deserializer
pctproblemtimecumcalc	string	from deserializer
percentcompletemljobcalc	string	from deserializer
percentcompletemlphasecalc	string	from deserializer
percenttmrotatingcalc	string	from deserializer
percenttmslidingcalc	string	from deserializer
plannextrptops	string	from deserializer
ratiodurprojmlplancalc	string	from deserializer
remarks	string	from deserializer
reportdaycalc	string	from deserializer
reportnocalc	string	from deserializer
rigscalc	string	from deserializer
rigdayscalc	string	from deserializer
rigdayscumcalc	string	from deserializer
rigtime	string	from deserializer
rigtimecumcalc	string	from deserializer
ropcalc	string	from deserializer
roprotatingcalc	string	from deserializer
ropslidingcalc	string	from deserializer
rpttmactops	string	from deserializer
safetyincnocalc	string	from deserializer
safetyincnocumcalc	string	from deserializer
safetyincratecalc	string	from deserializer
safetyincreportnocalc	string	from deserializer
safetyincreportnocumcalc	string	from deserializer
safetyincreportratecalc	string	from deserializer
statusend	string	from deserializer
summaryops	string	from deserializer
timeaheadmljobcalc	string	from deserializer
timeaheadmlphasecalc	string	from deserializer
timelogcode1calc	string	from deserializer
timelogcode2calc	string	from deserializer
timelogcode3calc	string	from deserializer
timelogcode4calc	string	from deserializer
tmcirccalc	string	from deserializer
tmcirccumcalc	string	from deserializer
tmdrillcalc	string	from deserializer
tmdrillcumcalc	string	from deserializer
tmothercalc	string	from deserializer
tmothercumcalc	string	from deserializer
tmrotatingcalc	string	from deserializer
tmslidingcalc	string	from deserializer
tmtripcalc	string	from deserializer
tmtripcumcalc	string	from deserializer
userboolean1	string	from deserializer
userboolean2	string	from deserializer
usernum1	string	from deserializer
usernum2	string	from deserializer
usernum3	string	from deserializer
usernum4	string	from deserializer
usernum5	string	from deserializer
usertxt1	string	from deserializer
usertxt2	string	from deserializer
usertxt3	string	from deserializer
usertxt4	string	from deserializer
usertxt5	string	from deserializer
volbittoshoecalc	string	from deserializer
volcastoptorisertopcalc	string	from deserializer
volpumptobitcalc	string	from deserializer
volshoetocastopcalc	string	from deserializer
volholecalc	string	from deserializer
volmudactivecalc	string	from deserializer
volmudactivevarcalc	string	from deserializer
volmudbalancecalc	string	from deserializer
volholevarcalc	string	from deserializer
volmudaddedcalc	string	from deserializer
volmudaddedcumcalc	string	from deserializer
volmudlosscalc	string	from deserializer
volmudlosscumcalc	string	from deserializer
volmudaddedlossvarcalc	string	from deserializer
volmudaddedlossvarcumcalc	string	from deserializer
volmudtankcalc	string	from deserializer
weightmetalrecovtotalcalc	string	from deserializer
syslockmeui	string	from deserializer
syslockchildrenui	string	from deserializer
syslockme	string	from deserializer
syslockchildren	string	from deserializer
syslockdate	bigint	from deserializer
sysmoddate	bigint	from deserializer
sysmoduser	string	from deserializer
syscreatedate	bigint	from deserializer
syscreateuser	string	from deserializer
systag	string	from deserializer
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="STAGE - STRUCTURE CHECK : wvjobreportcostgen" enabled="false">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">describe ${stageDB}.wvjobreportcostgen;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1945466917">name	type	comment
idwell	string	from deserializer
idrecparent	string	from deserializer
syscarryfwdp	string	from deserializer
idrec	string	from deserializer
code1	string	from deserializer
code2	string	from deserializer
code3	string	from deserializer
code4	string	from deserializer
code5	string	from deserializer
code6	string	from deserializer
cost	string	from deserializer
costcumcalc	string	from deserializer
des	string	from deserializer
idrecafecustom	string	from deserializer
idrecafecustomtk	string	from deserializer
idrecintervalproblemcustom	string	from deserializer
idrecintervalproblemcustomtk	string	from deserializer
idrecphasecustom	string	from deserializer
idrecphasecustomtk	string	from deserializer
intervalproblempct	string	from deserializer
note	string	from deserializer
opscategory	string	from deserializer
polineno	string	from deserializer
pono	string	from deserializer
sn	string	from deserializer
ticketno	string	from deserializer
unschedtyp	string	from deserializer
userboolean1	string	from deserializer
usertxt1	string	from deserializer
vendor	string	from deserializer
vendorcode	string	from deserializer
vendorsubcode	string	from deserializer
workorderno	string	from deserializer
sysseq	string	from deserializer
syslockmeui	string	from deserializer
syslockchildrenui	string	from deserializer
syslockme	string	from deserializer
syslockchildren	string	from deserializer
syslockdate	bigint	from deserializer
sysmoddate	bigint	from deserializer
sysmoduser	string	from deserializer
syscreatedate	bigint	from deserializer
syscreateuser	string	from deserializer
systag	string	from deserializer
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="STAGE - STRUCTURE CHECK : wvjobreporttimelog" enabled="false">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">DESCRIBE ${stageDB}.wvjobreporttimelog;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1713546692">name	type	comment
idwell	string	from deserializer
idrecparent	string	from deserializer
idrec	string	from deserializer
code1	string	from deserializer
code2	string	from deserializer
code3	string	from deserializer
code4	string	from deserializer
com	string	from deserializer
daysfromspudcalc	string	from deserializer
depthend	string	from deserializer
depthenddpcalc	string	from deserializer
depthstart	string	from deserializer
depthstartdpcalc	string	from deserializer
depthtvdendcalc	string	from deserializer
depthtvdstartcalc	string	from deserializer
dttmendcalc	bigint	from deserializer
dttmstartcalc	bigint	from deserializer
duration	string	from deserializer
durationnoprobtimecalc	string	from deserializer
durationnoprobtimecumcalc	string	from deserializer
durationproblemtimecalc	string	from deserializer
durationproblemtimecumcalc	string	from deserializer
durationtimelogcumspudcalc	string	from deserializer
durationtimelogtotcumcalc	string	from deserializer
formationcalc	string	from deserializer
idrecjobprogramphasecalc	string	from deserializer
idrecjobprogramphasecalctk	string	from deserializer
idreclastrigcalc	string	from deserializer
idreclastrigcalctk	string	from deserializer
idrecwellbore	string	from deserializer
idrecwellboretk	string	from deserializer
idrecwsstring	string	from deserializer
idrecwsstringtk	string	from deserializer
inactive	string	from deserializer
inclendcalc	string	from deserializer
inclmaxcalc	string	from deserializer
inclstartcalc	string	from deserializer
opscategory	string	from deserializer
problemcalc	string	from deserializer
refderrick	string	from deserializer
refnoproblemcalc	string	from deserializer
reportdaycalc	string	from deserializer
reportnocalc	string	from deserializer
ropcalc	string	from deserializer
sumofdurationcalc	string	from deserializer
unschedtyp	string	from deserializer
usertxt1	string	from deserializer
usertxt2	string	from deserializer
wellboreszcalc	string	from deserializer
sysseq	string	from deserializer
syslockmeui	string	from deserializer
syslockchildrenui	string	from deserializer
syslockme	string	from deserializer
syslockchildren	string	from deserializer
syslockdate	bigint	from deserializer
sysmoddate	bigint	from deserializer
sysmoduser	string	from deserializer
syscreatedate	bigint	from deserializer
syscreateuser	string	from deserializer
systag	string	from deserializer
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="STAGE - STRUCTURE CHECK : wvjobintervalproblem" enabled="false">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">DESCRIBE ${stageDB}.wvjobintervalproblem;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-183227474">name	type	comment
idwell	string	from deserializer
idrecparent	string	from deserializer
idrec	string	from deserializer
accountablepty	string	from deserializer
actiontaken	string	from deserializer
com	string	from deserializer
costcalc	string	from deserializer
costrecov	string	from deserializer
dateortyp	string	from deserializer
daysfromspudcalc	string	from deserializer
depthend	string	from deserializer
depthtvdendcalc	string	from deserializer
depthstart	string	from deserializer
depthtvdstartcalc	string	from deserializer
des	string	from deserializer
dttmend	bigint	from deserializer
dttmendorcalc	bigint	from deserializer
dttmstart	bigint	from deserializer
dttmstartorcalc	bigint	from deserializer
durationgrosscalc	string	from deserializer
durationnetcalc	string	from deserializer
durationfactorcalc	string	from deserializer
durationtimelogcumspudcalc	string	from deserializer
durationtimelogtotcumcalc	string	from deserializer
estcostoverride	string	from deserializer
estlosttime	string	from deserializer
excludefromproblemtime	string	from deserializer
idrecfaileditem	string	from deserializer
idrecfaileditemtk	string	from deserializer
idrecjobprogramphasecalc	string	from deserializer
idrecjobprogramphasecalctk	string	from deserializer
idrecjobservicecontract	string	from deserializer
idrecjobservicecontracttk	string	from deserializer
idreclastrigcalc	string	from deserializer
idreclastrigcalctk	string	from deserializer
idrecwellbore	string	from deserializer
idrecwellboretk	string	from deserializer
opscondition	string	from deserializer
potentialseverity	string	from deserializer
problemsystem1	string	from deserializer
problemsystem2	string	from deserializer
problemsystem3	string	from deserializer
refno	string	from deserializer
reportdaycalc	string	from deserializer
reportnocalc	string	from deserializer
status	string	from deserializer
severity	string	from deserializer
typ	string	from deserializer
typdetail	string	from deserializer
sysseq	string	from deserializer
syslockmeui	string	from deserializer
syslockchildrenui	string	from deserializer
syslockme	string	from deserializer
syslockchildren	string	from deserializer
syslockdate	bigint	from deserializer
sysmoddate	bigint	from deserializer
sysmoduser	string	from deserializer
syscreatedate	bigint	from deserializer
syscreateuser	string	from deserializer
systag	string	from deserializer
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="STAGE - STRUCTURE CHECK : wvjobservicecontract" enabled="false">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">DESCRIBE ${stageDB}.wvjobservicecontract;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="837288317">name	type	comment
idwell	string	from deserializer
idrecparent	string	from deserializer
idrec	string	from deserializer
approvedby	string	from deserializer
contractref	string	from deserializer
des	string	from deserializer
dttmapproved	bigint	from deserializer
dttmendcontract	bigint	from deserializer
dttmeval	bigint	from deserializer
dttmstartcontract	bigint	from deserializer
evalperformedby	string	from deserializer
evalstatus	string	from deserializer
operatorcom	string	from deserializer
opscondition	string	from deserializer
percentscorecalc	string	from deserializer
scorecalc	string	from deserializer
scoremaxcalc	string	from deserializer
servicecompany	string	from deserializer
servicecompanycom	string	from deserializer
servicecompanyparent	string	from deserializer
servicecontracttyp	string	from deserializer
servicetyp	string	from deserializer
syslockmeui	string	from deserializer
syslockchildrenui	string	from deserializer
syslockme	string	from deserializer
syslockchildren	string	from deserializer
syslockdate	bigint	from deserializer
sysmoddate	bigint	from deserializer
sysmoduser	string	from deserializer
syscreatedate	bigint	from deserializer
syscreateuser	string	from deserializer
systag	string	from deserializer
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="STAGE - STRUCTURE CHECK : wv_vendor_parent_mapping" enabled="false">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">DESCRIBE ${stageDB}.wv_vendor_parent_mapping;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="191065848">name	type	comment
wv_vendor_name	string	
parent_name	string	
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="STAGE - STRUCTURE CHECK : vw_dwep_po_and_se_line_item" enabled="false">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">DESCRIBE ${stageDB}.vw_dwep_po_and_se_line_item;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1301458305">name	type	comment
commodity_id	string	
company_code_id	string	
contract_line_number	string	
contract_line_desc	string	
order_id	string	
aribaDocId	string
source_approved_date	bigint	
field_rep	string	
invoice_number	string	
description	string	
account_id	string	
account_name	string	
bu_id	string	
object_id	string	
sub_object_id	string	
full_account	string	
sub_ledger	string	
sub_ledger_type	string	
corp_high4	string	
sourceable_spend	string	
user_name	string	
cvx_email	string	
spend_type_name	string	
supplier_part_number	string	
mat_item_number	string	
part_number	string	
local_ref_number	string	
plant_combo	string	
prc_flag	string	
currency_symbol	string	
amount	string	
amount_src	string	
amount_after_discount	string	
amount_after_discount_src	string	
discount	string	
quantity_llf	string	
uom_llf	string	
unit_price_llf	string	
unit_price_llf_src	string	
load_update_time	bigint	
create_date_dm	bigint	
business_key	string	
annone_timecreated	bigint	
annone_timeupdated	bigint	
business_unit_sk	int	
hierarchy_name_l2	string	
hierarchy_name_l3	string	
business_unit_name	string	
business_unit_id	string	
end_date	int	
start_date	int	
doc_id	string	
transaction_type	string	
us_diverse__y_n_	string	
contract_id	string	
contract_indicator	string	
preparer_type_adj	string	
invoice_net_amount_usd	string	
supplier_id	string	
supplier_name_without_id	string	
csid_parent_name	string	
wbs_element	string	
wbs_element_id	string	
submit_date	int	
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="STAGE - STRUCTURE CHECK : vw_dwep_contracts" enabled="false">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">DESCRIBE ${stageDB}.vw_dwep_contracts;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-838787528">name	type	comment
contract_id	string	
contract_title	string	
description	string	
company_code_id	string	
business_unit_description	string	
contract_version_number	int	
contract_advisor_name	string	
contract_owner_name	string	
csid_parent	string	
csid_supplier	string	
supplier_id	string	
supplier_name	string	
country	string	
currency_symbol	string	
contract_status	string	
contract_hierarchy	string	
evergreen_y_n	string	
transactable_y_n	string	
intercompany_y_n	string	
payment_terms	string	
us_diverse_y_n	string	
open_field_1	string	
open_field_2	string	
date_last_spend_activity	bigint	
contract_effective_date	bigint	
contract_expiration_date	bigint	
percent_expended_usd	double	
actuals_usd_master_rolled_up	string	
max_commitment_usd	string	
parent_contract_id	string	
duration	string	
actuals_usd	string	
partner_approved_contract_value_usd	string	
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="STAGE - STRUCTURE CHECK : vw_dwep_ketera_catalog_item_list" enabled="false">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">DESCRIBE ${stageDB}.vw_dwep_ketera_catalog_item_list;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="966305707">name	type	comment
business_unit_description	string	
supplier_id	string	
ketera_supplier_name	string	
enterprise_category	string	
commodity	string	
date_effective	bigint	
supplier_part_number	string	
short_name	string	
supplier_part_description	string	
has_historical_spend_y_n	string	
lead_time	string	
price	string	
currency_symbol_price	string	
unit_of_measure_description	string	
catalog_count	int	
catalog_item_count	int	
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="lake - not empty check" enabled="true">
          <stringProp name="ForeachController.inputVal">table_2</stringProp>
          <stringProp name="ForeachController.returnVal">table_name_2</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
          <stringProp name="ForeachController.startIndex">0</stringProp>
          <stringProp name="ForeachController.endIndex">26</stringProp>
        </ForeachController>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables [lake - not empty check]" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="table_2_1" elementType="Argument">
                <stringProp name="Argument.name">table_2_1</stringProp>
                <stringProp name="Argument.value">afe_detail</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="table_2_2" elementType="Argument">
                <stringProp name="Argument.name">table_2_2</stringProp>
                <stringProp name="Argument.value">interval_problem</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="table_2_3" elementType="Argument">
                <stringProp name="Argument.name">table_2_3</stringProp>
                <stringProp name="Argument.value">interval_problem_full_sf</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="table_2_4" elementType="Argument">
                <stringProp name="Argument.name">table_2_4</stringProp>
                <stringProp name="Argument.value">interval_problem_full_with_link_sf</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="table_2_5" elementType="Argument">
                <stringProp name="Argument.name">table_2_5</stringProp>
                <stringProp name="Argument.value">invoice_detail</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="table_2_6" elementType="Argument">
                <stringProp name="Argument.name">table_2_6</stringProp>
                <stringProp name="Argument.value">invoice_for_full_sf</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="table_2_7" elementType="Argument">
                <stringProp name="Argument.name">table_2_7</stringProp>
                <stringProp name="Argument.value">invoice_to_npt_link</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="table_2_8" elementType="Argument">
                <stringProp name="Argument.name">table_2_8</stringProp>
                <stringProp name="Argument.value">time_log_detail</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="table_2_9" elementType="Argument">
                <stringProp name="Argument.name">table_2_9</stringProp>
                <stringProp name="Argument.value">test_afe_detail</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="table_2_10" elementType="Argument">
                <stringProp name="Argument.name">table_2_10</stringProp>
                <stringProp name="Argument.value">test_interval_problem</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="table_2_11" elementType="Argument">
                <stringProp name="Argument.name">table_2_11</stringProp>
                <stringProp name="Argument.value">test_interval_problem_full_sf</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="table_2_12" elementType="Argument">
                <stringProp name="Argument.name">table_2_12</stringProp>
                <stringProp name="Argument.value">test_interval_problem_full_with_link_sf</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="table_2_13" elementType="Argument">
                <stringProp name="Argument.name">table_2_13</stringProp>
                <stringProp name="Argument.value">test_invoice_detail</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="table_2_14" elementType="Argument">
                <stringProp name="Argument.name">table_2_14</stringProp>
                <stringProp name="Argument.value">test_invoice_for_full_sf</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="table_2_15" elementType="Argument">
                <stringProp name="Argument.name">table_2_15</stringProp>
                <stringProp name="Argument.value">test_invoice_to_npt_link</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="table_2_16" elementType="Argument">
                <stringProp name="Argument.name">table_2_16</stringProp>
                <stringProp name="Argument.value">test_time_log_detail</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="LAKE - NOT EMPTY CHECK : ${table_name_2}" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT COUNT(*) FROM ${lakeDB}.${table_name_2};</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="488631614">expr_0
0
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="lake - structure check" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="LAKE - STRUCTURE CHECK : afe_detail" enabled="false">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">DESCRIBE ${lakeDB}.afe_detail;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="463778899">name	type	comment
idwell	string	
wellname	string	
afe	string	
jobtyp	string	
wv_job_start_date	string	
job_end_date	string	
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="LAKE - STRUCTURE CHECK : cost_gen" enabled="false">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">DESCRIBE ${lakeDB}.cost_gen;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1523803452">name	type	comment
cost_gen_id	string	
afenumber	string	
job_id	string	
job_report_id	string	
jobreport_date	string	
code	string	
parent_name	string	
cost	string	
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="LAKE - STRUCTURE CHECK : interval_problem" enabled="false">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">DESCRIBE ${lakeDB}.interval_problem;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1600512549">name	type	comment
afenumber	string	
interval_problem_id	string	
servicetyp	string	
idwell	string	
idrecntervalproblem	string	
job_id	string	
npt_date_start	string	
npt_date_end	string	
parent_name	string	
cost	double	
estcostoverride	double	
status	string	
refno	string	
duration	double	
typ	string	
typdetail	string	
com	string	
internalproblemtype	string	
gl_code	array&lt;string&gt;	
gl_code_str	string	
costgen_des	string	
activitydescr	string	
npt_type_detail_description	string	
npt_type_typedetail_concat	string	
npt_event_no	string	
iswether	boolean	
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="LAKE - STRUCTURE CHECK : interval_problem_full_sf" enabled="false">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">DESCRIBE ${lakeDB}.interval_problem_full_sf;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1946697084">name	type	comment
afenumber	string	
interval_problem_id	string	
servicetyp	string	
idwell	string	
idrecntervalproblem	string	
job_id	string	
npt_date_start	string	
npt_date_end	string	
parent_name	string	
cost	double	
estcostoverride	double	
status	string	
refno	string	
duration	double	
typ	string	
typdetail	string	
com	string	
internalproblemtype	string	
gl_code	array&lt;string&gt;	
gl_code_str	string	
costgen_des	string	
activitydescr	string	
npt_type_detail_description	string	
npt_type_typedetail_concat	string	
npt_event_no	string	
iswether	boolean	
wellname	string	
afe	string	
jobtyp	string	
wv_job_start_date	string	
job_end_date	string	
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="LAKE - STRUCTURE CHECK : interval_problem_full_with_link_sf" enabled="false">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">DESCRIBE ${lakeDB}.interval_problem_full_with_link_sf;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-171345883">name	type	comment
interval_problem_id	string	
afenumber	string	
servicetyp	string	
idwell	string	
idrecntervalproblem	string	
job_id	string	
npt_date_start	string	
npt_date_end	string	
parent_name	string	
cost	double	
estcostoverride	double	
status	string	
refno	string	
duration	double	
typ	string	
typdetail	string	
com	string	
internalproblemtype	string	
gl_code	array&lt;string&gt;	
gl_code_str	string	
costgen_des	string	
activitydescr	string	
npt_type_detail_description	string	
npt_type_typedetail_concat	string	
npt_event_no	string	
iswether	boolean	
wellname	string	
afe	string	
jobtyp	string	
wv_job_start_date	string	
job_end_date	string	
invoice_id	string	
bydate	boolean	
bytitle	boolean	
byglcode	string	
byglcodepercents	int	
bytitleimpr	string	
bytitleimprpercents	int	
byinvoicedescription	string	
isemptydate	boolean	
bycode	boolean	
link_id	string	
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="LAKE - STRUCTURE CHECK : invoice_detail" enabled="false">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">DESCRIBE ${lakeDB}.invoice_detail;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1217191561">name	type	comment
aribaDocId	string
part_number	string	
description	string	
net_price	double	
unit_price_llf	string	
quantity_llf	string	
discount	string	
uom_llf	string	
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="LAKE - STRUCTURE CHECK : invoice_for_full_sf" enabled="false">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">DESCRIBE ${lakeDB}.invoice_for_full_sf;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1661293200">name	type	comment
invoice_id	string	
iswether	boolean	
npt_event_no	string	
servicetyp	string	
npt_no	string	
nptDuration	double
interval_problem_id	string	
bydate	boolean	
bycode	boolean	
bytitle	boolean	
byglcode	string	
byglcodepercents	int	
bytitleimpr	string	
bytitleimprpercents	int	
byinvoicedescription	string	
isemptydate	boolean	
npt_date_start	string	
npt_date_end	string	
refno	string	
npt_type_typedetail_concat	string	
npt_com	string	
npt_type_detail_description	string	
numbers	string	
contract_title	string	
contract_title_no_vendor	string	
contract_id	string	
submit_date	string	
approved_date	string	
inv_start_date	string	
submit_date	string
is_date_valid	boolean	
supplier_name_without_id	string	
aribaDocId	string
invoice_number	string	
code	string	
price	double	
supplier_id	string	
wbs_element_id	string	
parent_vendor	string	
description	string	
npt_duration_date_related	double	
duration_total	int	
cost_per_hour	double	
pt_spent_leakage_npt	double	
pt_spent_leakage_total	double	
pt_spent_leakage_date_related	double	
idwell	string	
wellname	string	
afe	string	
jobtyp	string	
wv_job_start_date	string	
job_end_date	string	
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="LAKE - STRUCTURE CHECK : invoice_for_sf" enabled="false">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">DESCRIBE ${lakeDB}.invoice_for_sf;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-59575881">name	type	comment
_c0	int	
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="LAKE - STRUCTURE CHECK : invoice_t" enabled="false">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">DESCRIBE ${lakeDB}.invoice_t;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="908169628">name	type	comment
value	int	
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="LAKE - STRUCTURE CHECK : invoice_to_npt_link" enabled="false">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">DESCRIBE ${lakeDB}.invoice_to_npt_link;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1968632393">name	type	comment
invoice_id	string	
interval_problem_id	string	
bydate	boolean	
bytitle	boolean	
byglcode	string	
byglcodepercents	int	
bytitleimpr	string	
bytitleimprpercents	int	
byinvoicedescription	string	
isemptydate	boolean	
bycode	boolean	
link_id	string	
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="LAKE - STRUCTURE CHECK : pdf_key_values" enabled="false">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">DESCRIBE ${lakeDB}.pdf_key_values;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-59575881">name	type	comment
_c0	int	
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="LAKE - STRUCTURE CHECK : time_log_detail" enabled="false">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">DESCRIBE ${lakeDB}.time_log_detail;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1750201072">name	type	comment
interval_problem_id	string	
activitycode	string	
activitydescr	string	
costgen_des	string	
com	string	
duration	string	
end_date	string	
start_date	string	
job_id_timelog	string	
code1	string	
jobreport_date_timelog	string	
npt_num	string	
npt_event_no	string	
is_npt	boolean	
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="LAKE - STRUCTURE CHECK : interval_problem_detail" enabled="false">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">DESCRIBE ${lakeDB}.interval_problem_detail;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1756471034">name	type	comment
afenumber	string	
interval_problem_id	string	
servicetyp	string	
idwell	string	
idrecntervalproblem	string	
job_id	string	
npt_date_start	string	
npt_date_end	string	
parent_name	string	
cost	double	
estcostoverride	double	
status	string	
refno	string	
duration	double	
typ	string	
typdetail	string	
com	string	
internalproblemtype	string	
gl_code	array&lt;string&gt;	
gl_code_str	string	
costgen_des	string	
activitydescr	string	
npt_type_detail_description	string	
npt_type_typedetail_concat	string	
npt_whr_event_no	string	
npt_event_no	string	
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="LAKE - STRUCTURE CHECK : training_dataset" enabled="false">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">DESCRIBE ${lakeDB}.training_dataset;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1747758210">name	type	comment
interval_problem_id	string	
afenumber	string	
servicetyp	string	
idwell	string	
idrecntervalproblem	string	
job_id	string	
npt_date_start	string	
npt_date_end	string	
parent_name	string	
cost	double	
estcostoverride	double	
status	string	
refno	string	
duration	double	
typ	string	
typdetail	string	
com	string	
internalproblemtype	string	
gl_code	array&lt;string&gt;	
gl_code_str	string	
costgen_des	string	
activitydescr	string	
npt_type_detail_description	string	
npt_type_typedetail_concat	string	
npt_event_no	string	
iswether	boolean	
wellname	string	
afe	string	
jobtyp	string	
wv_job_start_date	string	
job_end_date	string	
invoice_id	string	
bydate	boolean	
bytitle	boolean	
byglcode	string	
byglcodepercents	int	
bytitleimpr	string	
bytitleimprpercents	int	
byinvoicedescription	string	
isemptydate	boolean	
bycode	boolean	
link_id	string	
contract_title	string	
contract_title_no_vendor	string	
contract_id	string	
submit_date	string	
approved_date	string	
inv_start_date	string	
submit_date	string
is_date_valid	boolean	
supplier_name_without_id	string	
aribaDocId	string
invoice_number	string	
code	array&lt;string&gt;	
price	double	
supplier_id	string	
wbs_element_id	string	
parent_vendor	string	
description	string	
usertxt1	string	
code1	string	
timelog_com	string	
splitedrefno	string	
depthstartdpcalc	string	
depthenddpcalc	string	
ropcalc	string	
inclstartcalc	string	
inclendcalc	string	
inclmaxcalc	string	
formationcalc	string	
costrecov	string	
problemsystem2	string	
idreclastrigcalc	string	
idreclastrigcalctk	string	
idrecjobprogramphasecalc	string	
idrecjobprogramphasecalctk	string	
rigno	string	
jrig_contractor	string	
responsiblegrp1	string	
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="LAKE - STRUCTURE CHECK : test_afe_detail" enabled="false">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">DESCRIBE ${lakeDB}.test_afe_detail;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="463778899">name	type	comment
idwell	string	
wellname	string	
afe	string	
jobtyp	string	
wv_job_start_date	string	
job_end_date	string	
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="LAKE - STRUCTURE CHECK : test_cost_gen" enabled="false">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">DESCRIBE ${lakeDB}.test_cost_gen;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-59575881">name	type	comment
_c0	int	
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="LAKE - STRUCTURE CHECK : test_interval_problem" enabled="false">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">DESCRIBE ${lakeDB}.test_interval_problem;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1600512549">name	type	comment
afenumber	string	
interval_problem_id	string	
servicetyp	string	
idwell	string	
idrecntervalproblem	string	
job_id	string	
npt_date_start	string	
npt_date_end	string	
parent_name	string	
cost	double	
estcostoverride	double	
status	string	
refno	string	
duration	double	
typ	string	
typdetail	string	
com	string	
internalproblemtype	string	
gl_code	array&lt;string&gt;	
gl_code_str	string	
costgen_des	string	
activitydescr	string	
npt_type_detail_description	string	
npt_type_typedetail_concat	string	
npt_event_no	string	
iswether	boolean	
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="LAKE - STRUCTURE CHECK : test_interval_problem_full_sf" enabled="false">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">DESCRIBE ${lakeDB}.test_interval_problem_full_sf;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1946697084">name	type	comment
afenumber	string	
interval_problem_id	string	
servicetyp	string	
idwell	string	
idrecntervalproblem	string	
job_id	string	
npt_date_start	string	
npt_date_end	string	
parent_name	string	
cost	double	
estcostoverride	double	
status	string	
refno	string	
duration	double	
typ	string	
typdetail	string	
com	string	
internalproblemtype	string	
gl_code	array&lt;string&gt;	
gl_code_str	string	
costgen_des	string	
activitydescr	string	
npt_type_detail_description	string	
npt_type_typedetail_concat	string	
npt_event_no	string	
iswether	boolean	
wellname	string	
afe	string	
jobtyp	string	
wv_job_start_date	string	
job_end_date	string	
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="LAKE - STRUCTURE CHECK : test_interval_problem_full_with_link_sf" enabled="false">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">DESCRIBE ${lakeDB}.test_interval_problem_full_with_link_sf;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-171345883">name	type	comment
interval_problem_id	string	
afenumber	string	
servicetyp	string	
idwell	string	
idrecntervalproblem	string	
job_id	string	
npt_date_start	string	
npt_date_end	string	
parent_name	string	
cost	double	
estcostoverride	double	
status	string	
refno	string	
duration	double	
typ	string	
typdetail	string	
com	string	
internalproblemtype	string	
gl_code	array&lt;string&gt;	
gl_code_str	string	
costgen_des	string	
activitydescr	string	
npt_type_detail_description	string	
npt_type_typedetail_concat	string	
npt_event_no	string	
iswether	boolean	
wellname	string	
afe	string	
jobtyp	string	
wv_job_start_date	string	
job_end_date	string	
invoice_id	string	
bydate	boolean	
bytitle	boolean	
byglcode	string	
byglcodepercents	int	
bytitleimpr	string	
bytitleimprpercents	int	
byinvoicedescription	string	
isemptydate	boolean	
bycode	boolean	
link_id	string	
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="LAKE - STRUCTURE CHECK : test_invoice_detail" enabled="false">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">DESCRIBE ${lakeDB}.test_invoice_detail;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-59575881">name	type	comment
_c0	int	
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="LAKE - STRUCTURE CHECK : test_invoice_for_full_sf" enabled="false">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">DESCRIBE ${lakeDB}.test_invoice_for_full_sf;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1661293200">name	type	comment
invoice_id	string	
iswether	boolean	
npt_event_no	string	
servicetyp	string	
npt_no	string	
nptDuration	double
interval_problem_id	string	
bydate	boolean	
bycode	boolean	
bytitle	boolean	
byglcode	string	
byglcodepercents	int	
bytitleimpr	string	
bytitleimprpercents	int	
byinvoicedescription	string	
isemptydate	boolean	
npt_date_start	string	
npt_date_end	string	
refno	string	
npt_type_typedetail_concat	string	
npt_com	string	
npt_type_detail_description	string	
numbers	string	
contract_title	string	
contract_title_no_vendor	string	
contract_id	string	
submit_date	string	
approved_date	string	
inv_start_date	string	
submit_date	string
is_date_valid	boolean	
supplier_name_without_id	string	
aribaDocId	string
invoice_number	string	
code	string	
price	double	
supplier_id	string	
wbs_element_id	string	
parent_vendor	string	
description	string	
npt_duration_date_related	double	
duration_total	int	
cost_per_hour	double	
pt_spent_leakage_npt	double	
pt_spent_leakage_total	double	
pt_spent_leakage_date_related	double	
idwell	string	
wellname	string	
afe	string	
jobtyp	string	
wv_job_start_date	string	
job_end_date	string	
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="LAKE - STRUCTURE CHECK : test_invoice_for_sf" enabled="false">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">DESCRIBE ${lakeDB}.test_invoice_for_sf;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-59575881">name	type	comment
_c0	int	
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="LAKE - STRUCTURE CHECK : test_invoice_t" enabled="false">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">DESCRIBE ${lakeDB}.test_invoice;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1629009973">name	type	comment
invoice_id	string	
contract_title	string	
contract_title_no_vendor	string	
contract_id	string	
submit_date	string	
approved_date	string	
inv_start_date	string	
submit_date	string
is_date_valid	boolean	
supplier_name_without_id	string	
aribaDocId	string
invoice_number	string	
code	array&lt;string&gt;	
price	double	
supplier_id	string	
wbs_element_id	string	
parent_vendor	string	
description	string	
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="LAKE - STRUCTURE CHECK : test_invoice_to_npt_link" enabled="false">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">DESCRIBE ${lakeDB}.test_invoice_to_npt_link;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1968632393">name	type	comment
invoice_id	string	
interval_problem_id	string	
bydate	boolean	
bytitle	boolean	
byglcode	string	
byglcodepercents	int	
bytitleimpr	string	
bytitleimprpercents	int	
byinvoicedescription	string	
isemptydate	boolean	
bycode	boolean	
link_id	string	
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="LAKE - STRUCTURE CHECK : test_pdf_key_values" enabled="false">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">DESCRIBE ${lakeDB}.test_pdf_key_values;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-59575881">name	type	comment
_c0	int	
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="LAKE - STRUCTURE CHECK : test_time_log_detail" enabled="false">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">DESCRIBE ${lakeDB}.test_time_log_detail;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1750201072">name	type	comment
interval_problem_id	string	
activitycode	string	
activitydescr	string	
costgen_des	string	
com	string	
duration	string	
end_date	string	
start_date	string	
job_id_timelog	string	
code1	string	
jobreport_date_timelog	string	
npt_num	string	
npt_event_no	string	
is_npt	boolean	
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="acceptance [sprint - story - test]" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1496049450000</longProp>
        <longProp name="ThreadGroup.end_time">1496049450000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="invoice_for_full_sf" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="afe" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE afe = &quot;UWGDFD2100COM&quot; AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="idwell" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE idwell = &quot;C08A5A79F06C4B06898206B630820053&quot; AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="job_id" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE job_id = &quot;E4DA2C706BF74EE3A84E9BC8E05CE09F&quot; AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="afenumber" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE afenumber = &quot;UWGDFD2100COM&quot; AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ariba_doc_id" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE ariba_doc_id = &quot;XML29548433&quot; AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="isWether" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE isWether = true AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="id" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE id = &quot;K3fbgBEmXbA&quot; AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="npt_event_no" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE npt_event_no = &quot;Wthr1&quot; AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="servicetyp" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE servicetyp = &quot;Drilling &amp; Completions&quot; AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="npt_no" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE npt_no = &quot;Wthr1&quot; AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="npt_duration" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE npt_duration = 39.0 AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="interval_problem_id" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE interval_problem_id = -7888746095521520016 AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="byCode" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE byCode = true AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="bytitle" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE bytitle = false AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="byGlCode" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE byGlCode = &quot;Yes&quot; AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="byGlCodePercents" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE byGlCodePercents = 50 AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="byTitleImpr" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE byTitleImpr = &quot;No&quot; AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="byTitleImprPercents" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE byTitleImprPercents = 0 AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="isExceptionalMatchCase" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE isExceptionalMatchCase = false AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="byInvoiceDescription" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE byInvoiceDescription = &quot;No&quot; AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="isEmptyDate" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE isEmptyDate = true AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="npt_date_start" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE npt_date_start = &quot;2015-06-12T01:00:00.000-05:00&quot; AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="npt_date_end" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE npt_date_end = &quot;2015-06-16T16:00:00.000-05:00&quot; AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="refno" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE refno = &quot;29&quot; AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="rigno" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE rigno = &quot;Inspiration&quot; AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="npt_type_typedetail_concat" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE npt_type_typedetail_concat = &quot;WO_WTHR X COND&quot; AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="npt_com" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE npt_com = &quot;Wait on weather due to TS Bill.  42 kts max wind at 185° with 19’ max excursion.  Roll: 0.8°, Pitch: 0.2°, Heave: 1&apos;.  Current: 2.0 kts at 291°.  Rig Heading:  255°. .Waiting on weather (TS Bill) until conditions allow tubing running operations to continue.&quot; AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="npt_type_detail_description" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE npt_type_detail_description = &quot;Wait On - Weather - Extreme conditions. Hurricanes, typhoons, cyclones.&quot; AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="numbers" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE numbers = &quot;&quot; AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="contract_owner_name" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE contract_owner_name = &quot;Sun, Lihong&quot; AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="is_date_valid" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE is_date_valid = true AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="contract_title" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE contract_title = &quot;C1190140-V12  - ( GOM - OneSubsea, LLC - Subsea Aftermarket - Subagreement U-20941)&quot; AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="inv_start_date" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE inv_start_date = &quot;2015-08-26 00:00:00&quot; AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="inv_end_date" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE inv_end_date = &quot;2015-09-17 00:00:00&quot; AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="submit_date" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE submit_date = &quot;2016-06-14 00:00:00&quot; AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="approved_date" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE approved_date = &quot;2016-06-15 00:00:00&quot; AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="supplier_name_without_id" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE supplier_name_without_id = &quot;ONESUBSEA LLC&quot; AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="invoice_number" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE invoice_number = &quot;915832729&quot; AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="supplier_id" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE supplier_id = &quot;0050119799&quot; AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="wbs_element_id" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE wbs_element_id = &quot;UWGDFD2100COM&quot; AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="wbs_element" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE wbs_element = &quot;UWGDFD2100COM-(Tahiti PN005 DEV-Completion-PH4)&quot; AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="supplier_name_without" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE supplier_name_without = &quot;ONESUBSEA LLC :HOUSTON&quot; AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="parent_vendor" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE parent_vendor = &quot;SCHLUMBERGER COMPANIES&quot; AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="price" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE price = 23041.98 AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="code" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE code = &quot;72300200&quot; AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="commodity_ids" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE commodity_ids = &quot;M69;A27;M47&quot; AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="description" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE description = &quot;Mileage, Per Mile In Vehicle, $1.50 Per Mile, Note #3, Travel Allowance;Field Service, IWOCS, Subsea Tools, Phase 5 BU Well Intervention;LODGING-LODGING&quot; AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="contract_title_no_vendor" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE contract_title_no_vendor = &quot;c1190140 v12 gom subsea aftermarket subagreement u 20941&quot; AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="npt_duration_date_related" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE npt_duration_date_related = 0.0 AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="duration_total" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE duration_total = 528 AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="cost_per_hour" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE cost_per_hour = 44.0 AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="pt_spent_leakage_total" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE pt_spent_leakage_total = 2420.0 AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="pt_spent_leakage_date_related" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE pt_spent_leakage_date_related = 0.0 AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="pt_spent_leakage_npt" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE pt_spent_leakage_npt = 1716.0 AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="wellname" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE wellname = &quot;GC 596 - TAHITI PN005&quot; AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="jobtyp" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE jobtyp = &quot;Complete and Suspend&quot; AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="wv_job_start_date" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE wv_job_start_date = &quot;2015-03-20&quot; AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="job_end_date" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE job_end_date = &quot;2015-06-26&quot; AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="interval_problem_full_with_link_sf" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="interval_problem_id" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.interval_problem_full_with_link_sf
          WHERE interval_problem_id = -7888746095521520016 AND id = &quot;FJ8NEYFAEsv&quot;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="job_id" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.interval_problem_full_with_link_sf
          WHERE job_id = &quot;E4DA2C706BF74EE3A84E9BC8E05CE09F&quot; AND id = &quot;FJ8NEYFAEsv&quot;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="afenumber" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.interval_problem_full_with_link_sf
          WHERE afenumber = &quot;UWGDFD2100COM&quot; AND id = &quot;FJ8NEYFAEsv&quot;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="servicetyp" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.interval_problem_full_with_link_sf
          WHERE servicetyp = &quot;Drilling &amp; Completions&quot; AND id = &quot;FJ8NEYFAEsv&quot;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="rigno" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.interval_problem_full_with_link_sf
          WHERE rigno = &quot;Inspiration&quot; AND id = &quot;FJ8NEYFAEsv&quot;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="idwell" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.interval_problem_full_with_link_sf
          WHERE idwell = &quot;C08A5A79F06C4B06898206B630820053&quot; AND id = &quot;FJ8NEYFAEsv&quot;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="idrecntervalProblem" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.interval_problem_full_with_link_sf
          WHERE idrecntervalProblem = &quot;46C643BA6E4946B1BFC46F7D603AB930&quot; AND id = &quot;FJ8NEYFAEsv&quot;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="npt_date_start" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.interval_problem_full_with_link_sf
          WHERE npt_date_start = &quot;2015-06-12T01:00:00.000-05:00&quot; AND id = &quot;FJ8NEYFAEsv&quot;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="npt_date_end" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.interval_problem_full_with_link_sf
          WHERE npt_date_end = &quot;2015-06-16T16:00:00.000-05:00&quot; AND id = &quot;FJ8NEYFAEsv&quot;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="parent_name" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.interval_problem_full_with_link_sf
          WHERE parent_name = &quot;CHEVRON&quot; AND id = &quot;FJ8NEYFAEsv&quot;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="cost" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.interval_problem_full_with_link_sf
          WHERE cost = 3802000.0 AND id = &quot;FJ8NEYFAEsv&quot;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="estcostoverride" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.interval_problem_full_with_link_sf
          WHERE estcostoverride = 3802000.0 AND id = &quot;FJ8NEYFAEsv&quot;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="status" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.interval_problem_full_with_link_sf
          WHERE status = &quot;NPT&quot; AND id = &quot;FJ8NEYFAEsv&quot;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="refno" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.interval_problem_full_with_link_sf
          WHERE refno = &quot;29&quot; AND id = &quot;FJ8NEYFAEsv&quot;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="group_refno" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.interval_problem_full_with_link_sf
          WHERE group_refno = &quot;29&quot; AND id = &quot;FJ8NEYFAEsv&quot;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="duration" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.interval_problem_full_with_link_sf
          WHERE duration = 97.5 AND id = &quot;FJ8NEYFAEsv&quot;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="typ" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.interval_problem_full_with_link_sf
          WHERE typ = &quot;WO&quot; AND id = &quot;FJ8NEYFAEsv&quot;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="typdetail" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.interval_problem_full_with_link_sf
          WHERE typdetail = &quot;WTHR X COND&quot; AND id = &quot;FJ8NEYFAEsv&quot;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="com" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.interval_problem_full_with_link_sf
          WHERE com = &quot;Wait on weather due to TS Bill.  42 kts max wind at 185° with 19’ max excursion.  Roll: 0.8°, Pitch: 0.2°, Heave: 1&apos;.  Current: 2.0 kts at 291°.  Rig Heading:  255°. .Waiting on weather (TS Bill) until conditions allow tubing running operations to continue.&quot; AND id = &quot;FJ8NEYFAEsv&quot;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="internalProblemType" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.interval_problem_full_with_link_sf
          WHERE internalProblemType = &quot;DISCOUNT_ALL&quot; AND id = &quot;FJ8NEYFAEsv&quot;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="gl_code_str" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.interval_problem_full_with_link_sf
          WHERE gl_code_str = &quot;, 74400001,75100500&quot; AND id = &quot;FJ8NEYFAEsv&quot;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="costgen_des" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.interval_problem_full_with_link_sf
          WHERE costgen_des = &quot;.Environmental (HES). &quot; AND id = &quot;FJ8NEYFAEsv&quot;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="activitydescr" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.interval_problem_full_with_link_sf
          WHERE activitydescr = &quot;.. D&amp;C-HES - Safety meeting, toolbox talk, shift handover. Rig activities halted for pre-spud meetings or after action reviews (1 hour or less).&quot; AND id = &quot;FJ8NEYFAEsv&quot;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="npt_type_detail_description" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.interval_problem_full_with_link_sf
          WHERE npt_type_detail_description = &quot;Wait On - Weather - Extreme conditions. Hurricanes, typhoons, cyclones.&quot; AND id = &quot;FJ8NEYFAEsv&quot;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="npt_type_typedetail_concat" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.interval_problem_full_with_link_sf
          WHERE npt_type_typedetail_concat = &quot;WO_WTHR X COND&quot; AND id = &quot;FJ8NEYFAEsv&quot;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="npt_event_no" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.interval_problem_full_with_link_sf
          WHERE npt_event_no = &quot;Wthr1&quot; AND id = &quot;FJ8NEYFAEsv&quot;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="isWether" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.interval_problem_full_with_link_sf
          WHERE isWether = true AND id = &quot;FJ8NEYFAEsv&quot;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="wellname" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.interval_problem_full_with_link_sf
          WHERE wellname = &quot;GC 596 - TAHITI PN005&quot; AND id = &quot;FJ8NEYFAEsv&quot;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="jobtyp" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.interval_problem_full_with_link_sf
          WHERE jobtyp = &quot;Complete and Suspend&quot; AND id = &quot;FJ8NEYFAEsv&quot;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="wv_job_start_date" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.interval_problem_full_with_link_sf
          WHERE wv_job_start_date = &quot;2015-03-20&quot; AND id = &quot;FJ8NEYFAEsv&quot;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="job_end_date" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.interval_problem_full_with_link_sf
          WHERE job_end_date = &quot;2015-06-26&quot; AND id = &quot;FJ8NEYFAEsv&quot;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ariba_doc_id" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.interval_problem_full_with_link_sf
          WHERE ariba_doc_id = &quot;XML29066440&quot; AND id = &quot;FJ8NEYFAEsv&quot;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="npt_sub_group_duration" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.interval_problem_full_with_link_sf
          WHERE npt_sub_group_duration = 39.0 AND id = &quot;FJ8NEYFAEsv&quot;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="npt_sub_group_duration_bydate_only" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.interval_problem_full_with_link_sf
          WHERE npt_sub_group_duration_bydate_only = 0.0 AND id = &quot;FJ8NEYFAEsv&quot;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="cost_gen_id" enabled="false">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.interval_problem_full_with_link_sf
          WHERE cost_gen_id = &quot;60F1AD059D5849DDA6D10F4A861AC387&quot; AND id = &quot;FJ8NEYFAEsv&quot;;

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="byCode" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.interval_problem_full_with_link_sf
          WHERE byCode = true AND id = &quot;FJ8NEYFAEsv&quot;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="byDate" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.interval_problem_full_with_link_sf
          WHERE byDate = false AND id = &quot;FJ8NEYFAEsv&quot;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="byTitle" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.interval_problem_full_with_link_sf
          WHERE byTitle = false AND id = &quot;FJ8NEYFAEsv&quot;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="byGlCode" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.interval_problem_full_with_link_sf
          WHERE byGlCode = &quot;Yes&quot; AND id = &quot;FJ8NEYFAEsv&quot;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="byGlCodePercents" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.interval_problem_full_with_link_sf
          WHERE byGlCodePercents = 50 AND id = &quot;FJ8NEYFAEsv&quot;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="byTitleImpr" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.interval_problem_full_with_link_sf
          WHERE byTitleImpr = &quot;No&quot; AND id = &quot;FJ8NEYFAEsv&quot;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="byTitleImprPercents" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.interval_problem_full_with_link_sf
          WHERE byTitleImprPercents = 0 AND id = &quot;FJ8NEYFAEsv&quot;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="byInvoiceDescription" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.interval_problem_full_with_link_sf
          WHERE byInvoiceDescription = &quot;No&quot; AND id = &quot;FJ8NEYFAEsv&quot;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="isExceptionalMatchCase" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.interval_problem_full_with_link_sf
          WHERE isExceptionalMatchCase = false AND id = &quot;FJ8NEYFAEsv&quot;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="isEmptyDate" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.interval_problem_full_with_link_sf
          WHERE isEmptyDate = true AND id = &quot;FJ8NEYFAEsv&quot;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="id" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.interval_problem_full_with_link_sf
          WHERE id = &quot;FJ8NEYFAEsv&quot; AND id = &quot;FJ8NEYFAEsv&quot;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="116" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="GOMICA-1141" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select count(*) from (
    SELECT sum(is_amendment_manual &lt;&gt; prediction) / sum(is_amendment_manual = prediction) 
    FROM ${lakeDB}.pdf_contract_info where is_amendment_manual is not null
    having sum(is_amendment_manual &lt;&gt; prediction) / sum(is_amendment_manual = prediction) &lt; 0.1
) t</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="488631614">expr_0
0
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="GOMICA-1157" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT count(*)
FROM ${lakeDB}.amendments_to_contracts
WHERE is_amendment=TRUE 
AND  contract_id=&quot;C805983&quot; 
AND  parent_contract_id=&quot;C792540&quot;
AND country=&quot;US&quot;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="488631614">expr_0
0
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="125" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="GOMICA-1409" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.interval_problem_full_with_link_sf
          WHERE refno = &quot;29&quot; AND id = &quot;FJ8NEYFAEsv&quot;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="126" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="GOMICA-1432" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE byDate = false AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="127" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="GOMICA-1478" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.interval_problem_full_with_link_sf
          WHERE afe = &quot;UWGDFD2100COM&quot; AND id = &quot;FJ8NEYFAEsv&quot;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="132" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="GOMICA-1629" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE contract_id = &quot;CW1190140&quot; AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-258274964">count(*)
0
          </stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="132" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="GOMICA-1629" enabled="true">
              <stringProp name="dataSource">impalaPool</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query"> SELECT count(*)
          FROM ${lakeDB}.invoice_for_full_sf
          WHERE contract_id = &quot;CW1190140&quot; AND afenumber = &quot;UWGDFD2100COM&quot; AND  contract_id= &quot;CW1190140&quot; AND interval_problem_id=-7888746095521520016;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-258274964">count(*)
0
          </stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">12</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="133" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="GOMICA-1730" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select count(*)
FROM ${stageDB}.wvjobintervalproblem J where J.refno like &apos;25.%&apos; and J.idwell = &apos;4C85A8B8BE524DC8A63F74A1A0BD8C7C&apos;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1088200866">count(*)
0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Invoice_Analytics_MBD" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1579195601000</longProp>
        <longProp name="ThreadGroup.end_time">1579195601000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="MBD" enabled="true">
          <stringProp name="TestPlan.comments">This is to test if Wellview is joined to Simsmart correctly and the output shown is correct</stringProp>
        </GenericController>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="mbd_1" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select count(*) from ${lakeDB}.invoice_for_full_sf 
where npt_date_start &gt; npt_date_end;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="TestPlan.comments">NPT End &gt;= NPT Start</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="488631614">expr_0
0
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="mbd_2" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select count(*) from ${lakeDB}.invoice_for_full_sf 
where inv_end_date &lt; inv_start_date;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="TestPlan.comments">Invoice End &gt;= Invoice Start</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="488631614">expr_0
0
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="mbd_3" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select count(*) from ${lakeDB}.invoice_for_full_sf
where inv_start_date is null
or inv_end_date is null;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="TestPlan.comments">NPT End &gt;= NPT Start</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="488631614">expr_0
0
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="mbd_4" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select count(*) from ${lakeDB}.invoice_for_full_sf 
where inv_start_date &gt; npt_date_end 
and npt_date_start &gt; inv_end_date;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="488631614">expr_0
0
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="mbd_5" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select count(*) from ${lakeDB}.invoice_for_full_sf 
where datediff(inv_end_date,inv_start_date) &gt; 120 
and bydate = true;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="488631614">expr_0
0
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="mbd_6" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select count(*) from ${lakeDB}.invoice_for_full_sf 
where inv_end_date &gt; submit_date 
and bydate = true;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="488631614">expr_0
0
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="mbd_7" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select count(*) from
(
select id, count(*) as count_id 
from ${lakeDB}.invoice_for_full_sf
group by id having count(*) &gt; 1
) A;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2032289140">expr_0
0

</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="mbd_8" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select count(*) from 
(
select idwell, ariba_doc_id, refno, count(refno) as count_unique
from ${lakeDB}.invoice_for_full_sf 
group by idwell, ariba_doc_id, refno
having count(refno) &gt; 1) A;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2032289140">expr_0
0

</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="mbd_9" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select count(*) 
from ${lakeDB}.invoice_for_full_sf 
where ariba_doc_id is null;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2032289140">expr_0
0

</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="mbd_10" enabled="false">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select count(*) 
from ${lakeDB}.interval_problem_details 
where ariba_doc_id is null;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2032289140">expr_0
0

</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="mbd_11" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select count(*) from 
(
select id, count(distinct id) as count_id 
from ${lakeDB}.invoice_for_full_sf 
group by id 
having count(distinct id) &gt; 1
)A
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2032289140">expr_0
0

</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="mbd_12" enabled="false">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select count(*) 
from ${lakeDB}.invoice_for_full_sf
where afe != afenumber;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2032289140">expr_0
0

</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="mbd_13" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select count(*) 
from ${lakeDB}.invoice_for_full_sf
where wbs_element_id != afenumber;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="TestPlan.comments">All Records must have an Invoice Start, Invoice End, Contract Owner, Contract ID, Ariba Doc ID, Invoice Net Price, WBS Element, Reference Number, Invoice Approved Date, Invoice Submit Date</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2032289140">expr_0
0

</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="mbd_14" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select distinct npt_type_typedetail_concat from ${lakeDB}.invoice_for_full_sf
where bydate = True and iswether = True;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="TestPlan.comments">All Records must have an Invoice Start, Invoice End, Contract Owner, Contract ID, Ariba Doc ID, Invoice Net Price, WBS Element, Reference Number, Invoice Approved Date, Invoice Submit Date</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1400723890">npt_type_typedetail_concat
WO_WTHR X COND
WO_WTHR OCEAN
WO_WTHR
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="mbd_15" enabled="false">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select * from 
(select idrecntervalproblem, ariba_doc_id, refno, count(*) as cnt 
from ${lakeDB}.interval_problem_details
group by idrecntervalproblem, ariba_doc_id, refno 
having ariba_doc_id is not null) A 
where cnt &gt; 1
;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="TestPlan.comments">All Records must have an Invoice Start, Invoice End, Contract Owner, Contract ID, Ariba Doc ID, Invoice Net Price, WBS Element, Reference Number, Invoice Approved Date, Invoice Submit Date</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1857442379">idrecntervalproblem ariba_doc_id refno cnt 
0 0 0 0
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="mbd_16" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select count(*) 
from ${lakeDB}.invoice_for_full_sf 
where inv_start_date is null or 
inv_end_date is null or 
price is null or 
ariba_doc_id is null or 
approved_date is null or 
submit_date is null;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="TestPlan.comments">All Records must have an Invoice Start, Invoice End, Contract Owner, Contract ID, Ariba Doc ID, Invoice Net Price, WBS Element, Reference Number, Invoice Approved Date, Invoice Submit Date</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2032289140">expr_0
0

</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="mbd_17" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select count(*) from (
select idrecntervalproblem, job_id, count(*) 
from 
(select distinct idrecntervalproblem, job_id from ${lakeDB}.interval_problem_details ) A 
group by idrecntervalproblem, job_id
having count(*) &gt; 1
) B
;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="TestPlan.comments">All Records must have an Invoice Start, Invoice End, Contract Owner, Contract ID, Ariba Doc ID, Invoice Net Price, WBS Element, Reference Number, Invoice Approved Date, Invoice Submit Date</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1923900340">expr_0
0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Spend Leakage" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="spend_leakage_1" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select A.interval_problem_id, A.ariba_doc_id, A.bydate, A.npt_duration, B.group_duration from ${lakeDB}.invoice_for_full_sf A JOIN 
(select interval_problem_id,
ariba_doc_id, sum(duration) as group_duration
from ${lakeDB}.interval_problem_details 
where bydate = False
group by interval_problem_id, ariba_doc_id
order by ariba_doc_id) B 
ON A.interval_problem_id = B.interval_problem_id AND A.ariba_doc_id = B.ariba_doc_id
where npt_duration != group_duration and A.bydate = False
;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="TestPlan.comments">When By Date is False, the npt_duration  for a particular Ariba Doc ID and Interval Problem ID (full sf), should be equal to the sum of durations for all events with the same Ariba Doc ID and Interval Problem ID in Interval Problem Details.
</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="488631614">expr_0
0
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="spend_leakage_2" enabled="true">
            <stringProp name="dataSource">impalaPool</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select A.interval_problem_id, A.ariba_doc_id, A.bydate, A.npt_duration_bydate, B.group_duration
from ${lakeDB}.invoice_for_full_sf A JOIN 
(select interval_problem_id,
ariba_doc_id, sum(duration) as group_duration
from ${lakeDB}.interval_problem_details 
where bydate = True 
group by interval_problem_id, ariba_doc_id
order by ariba_doc_id) B 
ON A.interval_problem_id = B.interval_problem_id AND A.ariba_doc_id = B.ariba_doc_id
where A.npt_duration_bydate &gt; group_duration and A.bydate = True;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="TestPlan.comments">When By Date is True, the npt_duration_bydate for a particular Ariba Doc ID and Interval Problem ID (full_sf), is less than or equal to the sum of durations for all events with the same Ariba Doc ID and Interval problem ID in Interval Problem Details</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="488631614">expr_0
0
</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>true</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>true</samplerData>
            <xml>true</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>true</responseHeaders>
            <requestHeaders>true</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <fileName>true</fileName>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">test_results.xml</stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
